template:
  # select:
  #   - name: vacuum_speed
  #     state: >
  #       {% set fan_speed = state_attr('vacuum.morty', 'fan_speed') %}
  #       {{ 'Standard' if fan_speed == None else fan_speed }}
  #     options: >
  #       {% set fan_speed_list = state_attr('vacuum.morty', 'fan_speed_list') %}
  #       {{ ['Standard'] if fan_speed_list == None else fan_speed_list }}
  #     select_option:
  #       service: vacuum.set_fan_speed
  #       target:
  #         entity_id: vacuum.morty
  #       data:
  #         fan_speed: >
  #           {{ option }}

  #   - name: hdmi_bravia
  #     state: >
  #       {% set source = state_attr('media_player.sony_bravia_tv', 'source') %}
  #       {{ 'HDMI' if source == None else source }}
  #     options: >
  #       {% set source_list = state_attr('media_player.sony_bravia_tv', 'source_list') %}
  #       {{ ['HDMI'] if source_list == None else source_list }}
  #     select_option:
  #       service: media_player.select_source
  #       target:
  #         entity_id: media_player.sony_bravia_tv
  #       data:
  #         source: >
  #           {{ option }}

  #   - name: hdmi_samsung
  #     state: >
  #       {% set source = state_attr('media_player.samsung_tv', 'source') %}
  #       {{ 'Apple' if source == None else source }}
  #     options: >
  #       {% set source_list = state_attr('media_player.samsung_tv', 'source_list') %}
  #       {{ ['Apple'] if source_list == None else source_list }}
  #     select_option:
  #       service: media_player.select_source
  #       target:
  #         entity_id: media_player.samsung_tv
  #       data:
  #         source: >
  #           {{ option }}

  binary_sensor:
    #   - unique_id: laundry_time_trigger
    #     state: >
    #       {% set start_time = state_attr('calendar.tvatta', 'start_time') %}
    #       {{ as_timestamp(start_time) - as_timestamp(now()) < 10 * 60 if start_time != None }}

    - unique_id: sidebar_update_color
      state: >
        {% set installed = states('sensor.hass_version_installed') %}
        {% set latest = states('sensor.hass_version_latest') 
        if not installed | regex_search('b') else states('sensor.hass_version_latest_beta') %}
        {{ (installed != latest and installed != 'unknown' and latest != 'unknown')
        or (states('sensor.hacs') != 'unknown' and states('sensor.hacs') | int(default=0) > 0) }}


    - unique_id: davecom_on_home_wifi
      device_class: connectivity
      icon: mdi:wifi
      state: >
        {{ is_state('sensor.davecom_ssid', 'Sauron') or
        is_state('sensor.davecom_ssid', 'The Lord Of The Pings') }}
      attributes:
        friendly_name: Davecom on Home WIFI

    # - unique_id: ebonycom_on_home_wifi
    #   device_class: connectivity
    #   icon: mdi:wifi
    #   state: >
    #     {{ is_state('sensor.ebonycom_wifi_connection', 'Sauron') or
    #     is_state('sensor.ebonycom_wifi_connection', 'The Lord Of The Pings') }}
    #   attributes:
    #     friendly_name: Ebonycom on Home WIFI

    # - unique_id: imac_vpn
    #   device_class: connectivity
    #   icon: >
    #     mdi:shield-{{ 'alert' if is_state('switch.computer_imac', 'on') and
    #     states('sensor.imac_ip') == states('sensor.myip') else 'check' }}
    #   state: >
    #     {{ is_state('switch.computer_imac', 'on') and
    #     states('sensor.imac_ip') != states('sensor.myip') }}
    #   attributes:
    #     friendly_name: VPN

    # - unique_id: udm_internet
    #   icon: mdi:wan
    #   device_class: connectivity
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[4] | default }}
    #   attributes:
    #     friendly_name: Internet

    # - unique_id: udm_upgradable
    #   icon: mdi:update
    #   device_class: update
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[7] | default }}
    #   attributes:
    #     friendly_name: Uppdatering

  sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: >
          {% set hours = now().strftime('%H') %}
          {% set minutes = now().strftime('%M') %}
          <span class="time">
            {{ hours }}<span class="time-colon">:</span>{{ minutes }}
          </span>
        date: |
          <font color='#6a7377'><b>
          {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {%- set days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
          {%- set months = ['January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'] %}
            {{- days[now().weekday()] }}<br>
            {{- strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {%- endif -%}
          </b></font>
        greet: |
          <b>
          {%- set time = now().hour %}
          {%- if time <= 1 -%} Good Night {{'\uD83C\uDF19'}}
          {%- elif time <= 3 -%} Good Night {{'\uD83C\uDF19'}}
          {%- elif time <= 5 -%} Good Night {{'\uD83C\uDF19'}}
          {%- elif time <= 7 -%} Good Morning {{'\u2600\uFE0F'}}
          {%- elif time <= 9 -%} Good Morning {{'\u2600\uFE0F'}}
          {%- elif time <= 10 -%} Good Morning {{'\u2600\uFE0F'}}
          {%- elif time <= 13 -%} Good Afternoon
          {%- elif time <= 15 -%} Good Afternoon
          {%- elif time <= 17 -%} Good Afternoon
          {%- elif time <= 19 -%} Good Evening
          {%- elif time <= 22 -%} Good Evening
          {%- elif time <= 23 -%} Good Evening
          {%- else %} Good Evening
          {%- endif -%}
          </b>
        active: |
          <b>
          {%- set lights = [
            states.light.bathroom,
            states.light.bed,
            states.light.bedroom,
            states.light.chandelier,
            states.light.hallway,
            states.light.kitchen_east,
            states.light.kitchen_west,
            states.light.lightning_purple_1,
            states.light.lightning_purple_2,
            states.light.lightning_red,
            states.light.tv,
            states.light.table_lamp
          ] %}

          {%- set switches = [
            states.switch.blanket,
            states.switch.fan,
            states.switch.ipad_charger
          ] %}

          {%- set media_players = [
            states.media_player.living_room_tv,
            states.media_player.living_room_speaker,
            states.media_player.bedroom_tv,
            states.media_player.bedroom_speaker
          ] %}

          {%- set lights_on = lights | selectattr('state','eq','on') | list %}
          {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set switches_on = switches | selectattr('state','eq','on') | list %}
          {%- set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
          {%- set append = switches_on + media_players_playing %}
          {%- set switches_name = append | map(attribute='name') | join(', ') %}

          {%- if (lights_on | length == 0) and (switches_on | length > 0) -%}
            {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {%- elif (lights_on | length == 1) and (switches_on | length == 1) -%}
            {{ lights_name }} and {{switches_name }} are on

          {%- elif (lights_on | length == 1) and (switches_on | length > 1) -%}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {%- elif (lights_on | length > 1) and (switches_on | length == 1) -%}
            {{ lights_on | length }} lights and {{ switches_name }} are on

          {%- elif (lights_on | length > 1) and (switches_on | length > 1) -%}
            {{ lights_on | length }} lights, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

          {%- elif (lights_on | length == 1) and (switches_on | length == 0) -%}
            {{ lights_name }} are on

          {%- elif (lights_on | length > 1) and (switches_on | length == 0) -%}
            {{ lights_on | length }} lights are on

          {%- else %}
            <font color='#6a7377'>Everything is off</font>
          {%- endif -%}
          </b>
        # mailbox: |
        #   {% set mailbox = states('sensor.mailbox') %}
        #   {% if mailbox | int(default=0) > 0 %}
        #     {{ '\U0001F4EC' }} <font color='#6a7377'><b>Brevlåda ({{ mailbox }})</b></font>
        #   {% endif %}
        # vacuum: |
        #   {% set entity_id = 'vacuum.morty' %}
        #   {%- if is_state(entity_id, 'cleaning') -%}
        #     <b>Morty dammsuger</b>
        #   {%- elif is_state(entity_id, 'returning') -%}
        #     <b>Morty är färdig</b>
        #   {%- endif %}
        # weather: |
        #   {%- set temperature = states('sensor.dark_sky_temperature') %}
        #   {%- set apparent = states('sensor.dark_sky_apparent_temperature') | round %}
        #   {%- set precip = states('sensor.dark_sky_precip_probability') | round %}
        #   {% if not is_state('sensor.dark_sky_temperature', 'unknown') %}
        #     {%- if temperature | float(default=0) <= 0.0 -%}
        #       Känns som {{ apparent }}° med {{ precip }}% risk för snö {{'\u2744\uFE0F'}}
        #     {%- elif temperature | float(default=0) > 0.0 -%}
        #       Känns som {{ apparent}}° med {{ precip }}% risk för regn {{ '\u2614\uFE0F' if precip > 30 }}
        #     {%- endif %}
        #   {%- else %}
        #     Kan inte läsa in väderinformation...
        #   {%- endif %}
        # transport: |
        #   {{ states('sensor.skanetrafiken') }}
        # laundry: |
        #   {%- set start_time = state_attr('calendar.tvatta', 'start_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
        #     | replace('Monday', 'Måndag')
        #     | replace('Tuesday', 'Tisdag')
        #     | replace('Wednesday', 'Onsdag')
        #     | replace('Thursday', 'Torsdag')
        #     | replace('Friday', 'Fredag')
        #     | replace('Saturday', 'Lördag')
        #     | replace('Sunday', 'Söndag') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F4A6'}} Tvätt idag {{ time }}
        #     {%- elif count <= 1.0 -%}
        #       Tvätt imorgon klockan {{ time }}
        #     {%- elif count <= 2.0 -%}
        #       Tvätt i övermorgon klockan {{ time }}
        #     {%- else -%}
        #       Tvätt om {{ (count + hours) | round }} dagar på {{ day }} kl {{ time }}
        #     {%- endif %}
        #   {%- endif %}
        battery: |
          {% set entities = states.sensor 
            | selectattr('entity_id', 'search', 'battery_level')
            | rejectattr('entity_id', 'search', 'iphone')
            | rejectattr('entity_id', 'search', 'dixel')
            | map(attribute = 'entity_id') | list %}
          {%- for sensor in entities if states(sensor) != 'unknown' and states(sensor) !=
          'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 20 %}
            {%- if loop.first %} {{-'\u26A0\uFE0F'}} {% else %} {{ '\n' }} {{-'\u26A0\uFE0F'}} {% endif -%}
            {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
          {%- endfor %}
        open_doors: |
          <b>
          {%- set doors = [
            states.binary_sensor.front_door_is_open,
            states.binary_sensor.back_door_is_open
          ] %}

          {%- set doors_open = doors | selectattr('state','eq','on') | list %}
          {%- set doors_name = doors | selectattr('state','eq','on') | map(attribute='name') | join(', \n') %}

          {%- if (doors_open | length > 0) -%}
            {{ doors_name }}
          {% endif %}
          </b>
        open_windows: |
          <b>
          {%- set windows = [
            states.binary_sensor.living_room_window_south_is_open,
            states.binary_sensor.living_room_window_west_left_is_open,
            states.binary_sensor.living_room_window_west_right_is_open,
            states.binary_sensor.kitchen_window_north_is_open,
            states.binary_sensor.kitchen_window_west_right_is_open,
            states.binary_sensor.kitchen_window_west_left_is_open,
            states.binary_sensor.bedroom_window_east_is_open,
            states.binary_sensor.bedroom_window_west_is_open,
            states.binary_sensor.bathroom_window_is_open
          ] %}

          {%- set windows_open = windows | selectattr('state','eq','on') | list %}
          {%- set windows_name = windows | selectattr('state','eq','on') | map(attribute='name') | join('& ') %}

          {%- if (windows_open | length > 0) -%}
            {%- if (windows_open | length == 1) -%}
              {{ windows_name }}
            {%- else %}
              Open Windows:
              {{ windows_name | regex_replace('Window','') | regex_replace('Is Open','') }}
            {% endif %}
          {% endif %}
          </b>

        
        

        # {% set entities = states.sensor 
        #   | selectattr('entity_id', 'search', 'battery_level')
        #   | rejectattr('entity_id', 'search', 'iphone')
        #   | rejectattr('entity_id', 'search', 'dixel')
        #   | map(attribute = 'entity_id') | list %}
        # {%- for sensor in entities if states(sensor) != 'unknown' and states(sensor) !=
        # 'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 20 %}
        #   {%- if loop.first %} {{-'\u26A0\uFE0F'}} {% else %} {{ '\n' }} {{-'\u26A0\uFE0F'}} {% endif -%}
        #   {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
        # {%- endfor %}
        # mathem: |
        #   {%- set start_time = state_attr('calendar.mathem', 'start_time') %}
        #   {%- set end_time = state_attr('calendar.mathem', 'end_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
        #     | replace('Monday', 'Måndag')
        #     | replace('Tuesday', 'Tisdag')
        #     | replace('Wednesday', 'Onsdag')
        #     | replace('Thursday', 'Torsdag')
        #     | replace('Friday', 'Fredag')
        #     | replace('Saturday', 'Lördag')
        #     | replace('Sunday', 'Söndag') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F6D2'}} Mathem idag mellan {{ time }}-{{ time_end }}
        #     {%- elif count <= 1.0 -%}
        #       Mathem imorgon mellan {{ time }}-{{ time_end }}
        #     {%- elif count <= 2.0 -%}
        #       Mathem i övermorgon mellan {{ time }}-{{ time_end }}
        #     {%- else -%}
        #       Mathem om {{ (count + hours) | round }} dagar på {{ day }} mellan {{ time }}-{{ time_end }}
        #     {%- endif %}
        #   {%- endif %}
        # plex: |
        #   {% if is_state('binary_sensor.plex_availability', 'off') -%}
        #     {{-'\u26A0\uFE0F'}} Plex är nere...
        #   {%- endif %}

        # distance_apart: |
        #   {%- set distance = states('sensor.drive_time_dave_to_ebony') %}
        #   {% if not is_state('sensor.drive_time_dave_to_ebony', 'unknown') %}
        #     {%- if distance | int(default=0) >= 2 -%}
        #     <b>
        #       {{-'\uD83D\uDE97'}} Ebony and Dave are {{ distance }} minutes apart.
        #     </b>
        #     {% endif %}
        #   {% endif %}

    # - unique_id: updates
    #   state: template
    #   attributes:
    #     esphome: >
    #       {% macro f(e) %}
    #         {{- device_attr(device_id('switch.' + e), 'sw_version') -}}
    #       {% endmacro %}
    #       {% set group = [f('gosund_1_switch'), f('gosund_2_switch'), f('gosund_3_switch')] | min %}
    #       {% set installed = group.split()[0] %}
    #       {% set latest = states('sensor.esphome_version_latest') %}
    #       {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     playactor: >
    #       {% set installed = states('sensor.playactor_version_installed') %}
    #       {% set latest = states('sensor.playactor_version_latest') %}
    #       {% set url = 'https://github.com/dhleong/playactor/releases/latest' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">playactor</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     kemperprofiler: >
    #       {% set installed = state_attr('sensor.kemper_version', 'profiler_installed') %}
    #       {% set latest = state_attr('sensor.kemper_version', 'profiler_latest') %}
    #       {% set url = 'https://www.kemper-amps.com/downloads' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">Kemper Profiler OS</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     rigmanager: >
    #       {% set installed = state_attr('sensor.kemper_version', 'rigmanager_installed') %}
    #       {% set latest = state_attr('sensor.kemper_version', 'rigmanager_latest') %}
    #       {% set url = 'https://www.kemper-amps.com/downloads' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">Rig Manager</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     unifi: >
    #       {% set installed = states('sensor.template_udm_version') %}
    #       {% set url = 'https://community.ui.com/releases?q=dream+machine' %}
    #       {% if is_state('binary_sensor.template_udm_upgradable', 'on') %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">UniFi Dream Machine ({{ installed }})</a></b> uppdatering tillgänglig
    #       {% endif %}
    #     synology: >
    #       {% set installed = device_attr(device_id('sensor.nas_volume_1_status'), 'sw_version').split(' ')[1] %}
    #       {% set latest = states('sensor.synology_dsm_latest') %}
    #       {% set url = 'https://www.synology.com/en-global/releaseNote/DSM' %}
    #       {% if is_state('binary_sensor.nas_update_available', 'on') %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">Synology DSM</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}

    # - unique_id: udm_cpu
    #   icon: mdi:chip
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[0] | default }}
    #   attributes:
    #     friendly_name: Processor

    # - unique_id: udm_cpu_temp
    #   icon: mdi:thermometer
    #   unit_of_measurement: '°C'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[1] | default }}
    #   attributes:
    #     friendly_name: Processortemperatur

    # - unique_id: udm_mem
    #   icon: mdi:memory
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[2] | default }}
    #   attributes:
    #     friendly_name: Minne

    # - unique_id: udm_disk
    #   icon: mdi:harddisk
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[3] | default }}
    #   attributes:
    #     friendly_name: Lagring

    # - unique_id: udm_uptime
    #   device_class: timestamp
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[5] | default }}
    #   attributes:
    #     friendly_name: Senaste omstart

    # - unique_id: udm_version
    #   icon: mdi:router-wireless
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[6] | default }}
    #   attributes:
    #     friendly_name: Version

    # - unique_id: nas_status
    #   icon: custom:synology-nas
    #   state: >
    #     {% set entity_id = 'sensor.nas_volume_1_status' %}
    #     {% if is_state(entity_id, 'normal') %}
    #       Bra
    #     {% elif is_state(entity_id, 'background') %}
    #       Verifierar
    #     {% else %}
    #       {{ states(entity_id) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Systemhälsa

    - unique_id: bathroom_occupancy
      icon: mdi:paper-roll
      state: >
        {{ 'Occupied' if states('binary_sensor.bathroom_occupancy') ==
        'on' else 'Unoccupied' }}
      attributes:
        friendly_name: >
          Bathroom Status

    # - unique_id: dave_last_changed
    #   device_class: timestamp
    #   state: >
    #     {% set ts_zoned = as_timestamp(states.person.dave.last_changed) | timestamp_custom('%Y-%m-%dT%H:%M:%S%z') %}
    #     {{ ts_zoned[:-2] ~ ':' ~ ts_zoned[-2:] }}
    #   attributes:
    #     friendly_name: Dave last changed

    # - unique_id: dave_last_updated
    #   device_class: timestamp
    #   state: >
    #     {% set ts_zoned = as_timestamp(states.device_tracker.davecom.last_changed) | timestamp_custom('%Y-%m-%dT%H:%M:%S%z') %}
    #     {{ ts_zoned[:-2] ~ ':' ~ ts_zoned[-2:] }}
    #   attributes:
    #     friendly_name: Dave last updated

    # - unique_id: ebony_last_changed
    #   device_class: timestamp
    #   state: >
    #     {% set ts_zoned = as_timestamp(states.person.ebony.last_changed) | timestamp_custom('%Y-%m-%dT%H:%M:%S%z') %}
    #     {{ ts_zoned[:-2] ~ ':' ~ ts_zoned[-2:] }}
    #   attributes:
    #     friendly_name: Ebony last changed

    # - unique_id: ebony_last_updated
    #   device_class: timestamp
    #   state: >
    #     {% set ts_zoned = as_timestamp(states.device_tracker.ebonycom.last_changed) | timestamp_custom('%Y-%m-%dT%H:%M:%S%z') %}
    #     {{ ts_zoned[:-2] ~ ':' ~ ts_zoned[-2:] }}
    #   attributes:
    #     friendly_name: Ebony last updated

    - unique_id: hass_version
      icon: mdi:home-assistant
      state: >
        {{ 'Latest' if states('sensor.hass_version_installed') ==
        states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}
      attributes:
        friendly_name: >
          Installed {{ states('sensor.hass_version_installed') }}

    - unique_id: hass_dev_release
      icon: mdi:dev-to
      device_class: timestamp
      state: >
        {{ (as_timestamp(state_attr('calendar.home_assistant_devs', 'start_time'), default=0) + 60*60*18) | timestamp_local(default) }}
      attributes:
        friendly_name: >
          {% set release = state_attr('calendar.home_assistant_devs','message') %}
          {% if release == 'Home Assistant Core Beta Release' %}
            Next beta
          {% elif release == 'Home Assistant Core Release' %}
            Next release
          {% else %}
            {{ release }}
          {% endif %}

    - unique_id: hacs_version
      state: >
        {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}

    # - unique_id: dockermon_mem
    #   icon: mdi:memory
    #   state: >
    #     {% set entity_id = 'sensor.docker_cpu' %}
    #     {{ (state_attr(entity_id, 'memory_stats')['usage'] /
    #     state_attr(entity_id, 'memory_stats')['limit'] * 100) | round(1) | default(0) }}
    #   attributes:
    #     friendly_name: Minne

    # - unique_id: printer_status
    #   icon: mdi:printer-wireless
    #   state: >
    #     {% macro prt(state, translate) %}
    #     {{ translate if states('sensor.hp_deskjet_2600_series') == state }}
    #     {% endmacro %}
    #     {{ prt('On', 'På') }}
    #     {{ prt('Scanning', 'Skannar') }}
    #     {{ prt('Copying', 'Kopierar') }}
    #     {{ prt('Printing', 'Skriver ut') }}
    #     {{ prt('Cancelling Job', 'Avbryter') }}
    #     {{ prt('trayEmptyOrOpen', 'Inga papper') }}
    #     {{ prt('idle', 'Viloläge') }}
    #     {{ prt('Off', 'Av') }}
    #   attributes:
    #     friendly_name: Skrivare

    - unique_id: domain_counter
      state: >
        {{ states | count }}
      attributes:
        automation: >
          {{ states.automation | count }}
        binary_sensor: >
          {{ states.binary_sensor | count }}
        device_tracker: >
          {{ states.device_tracker | count }}
        light: >
          {{ states.light | count }}
        media_player: >
          {{ states.media_player | count }}
        sensor: >
          {{ states.sensor | count }}
        switch: >
          {{ states.switch | count }}
        other: >
          {{ states.calendar | count +
          states.camera | count +
          states.climate | count +
          states.fan | count +
          states.input_boolean | count +
          states.input_number | count +
          states.input_select | count +
          states.lock | count +
          states.person | count +
          states.remote | count +
          states.scene | count +
          states.script | count +
          states.select | count +
          states.sun | count +
          states.timer | count +
          states.vacuum | count +
          states.weather | count +
          states.zone | count }}

    # - unique_id: vacuum_filter
    #   icon: custom:roborock-filter
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.morty_filter_left') | int(default=0) / 5400) | int(default=0) }}
    #   attributes:
    #     friendly_name: Filter

    # - unique_id: vacuum_mainbrush
    #   icon: custom:roborock-mainbrush
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.morty_main_brush_left') | int(default=0) / 10800) | int(default=0) }}
    #   attributes:
    #     friendly_name: Huvudborste

    # - unique_id: vacuum_sensors
    #   icon: custom:roborock-sensor
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.morty_sensor_dirty_left') | int(default=0) / 1080) | int(default=0) }}
    #   attributes:
    #     friendly_name: Sensorer

    # - unique_id: vacuum_sidebrush
    #   icon: custom:roborock-sidebrush
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.morty_side_brush_left') | int(default=0) / 7200) | int(default=0) }}
    #   attributes:
    #     friendly_name: Sidoborste

    # - unique_id: fullykiosk_storage
    #   icon: mdi:sd
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set FreeSpace = states('sensor.galaxy_tab_a_internal_storage_free_space') | float(default=0) %}
    #     {% set TotalSpace = states('sensor.galaxy_tab_a_internal_storage_total_space') | float(default=0) %}
    #     {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
    #       {{ 100 - (FreeSpace / TotalSpace * 100) | int(default=0) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Lagring

    # - unique_id: fullykiosk_memory
    #   icon: mdi:memory
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set FreeMemory = states('sensor.galaxy_tab_a_ram_free_memory') | float(default=0) %}
    #     {% set TotalMemory = states('sensor.galaxy_tab_a_ram_total_memory') | float(default=0) %}
    #     {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
    #       {{ 100 - (FreeMemory / TotalMemory * 100) | int(default=0) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Minne

    # - unique_id: fullykiosk_last_app_start
    #   icon: mdi:update
    #   device_class: timestamp
    #   state: >
    #     {{ as_timestamp(states('sensor.galaxy_tab_a_last_app_start'), default=0) | timestamp_local(default=0) }}
    #   attributes:
    #     friendly_name: Senast omstart
